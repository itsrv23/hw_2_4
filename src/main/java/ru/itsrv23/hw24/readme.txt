> Привет!
На связи домашнее задание урока 2.4 Работа с исключениями.
>

Ваша задача: нужно перенести из курсовой работу с массивом сотрудников в сервис на базе веб-приложения на Spring. Заменить сообщения об ошибках выбросом исключений с определенными HTTP-статусами.

### Шаг 1

Создать Spring Boot проект.

### Шаг 2

Подключить модуль Spring Web.

### Шаг 3

Перенести из курсовой класс Employee, оставив в нем только поля firstName и lastName, конструктор, геттеры и методы hashCode, equals, toString.

### Шаг 4

Создать сервис EmployeeService, который хранит внутри поле с массивом сотрудников.

### Шаг 5

Реализовать в сервисе три метода, которые принимают в качестве параметров firstName и lastName:

1. Добавить сотрудника.
2. Удалить сотрудника.
3. Найти сотрудника.

### Шаг 6

Написать непроверяемое исключение, которое выбрасывается, если сотрудник не найден.

Возвращает статус 404 Not Found.

### Шаг 7

Написать непроверяемое исключение, которое выбрасывается, если массив сотрудников переполнен.

Возвращает статус 500 Internal Server Error.

### Шаг 8

Написать непроверяемое исключение, которое выбрасывается, если в массиве есть сотрудник, когда сотрудника пытаются добавить в массив.

Возвращает статус 400 Bad Request.

### Шаг 9

Добавить в методы из шага 5 новые исключения.

1. В метод с добавлением сотрудника нужно добавить выброс исключения из шага 7 в ситуации, когда массив переполнен.
2. В метод с добавлением сотрудника нужно добавить выброс исключения из шага 8 в ситуации, когда добавляемый сотрудник уже имеется в массиве.
3. В метод с удалением сотрудника нужно добавить выброс исключения из шага 6 в ситуации, когда удаляемый сотрудник не найден.
4. В метод с поиском сотрудника нужно добавить выброс исключения из шага 8 в ситуации, когда сотрудник не найден.

### Шаг 10

Реализовать EmployeeController, который имеет поле EmployeeService.

Объявить конструктор с этим параметром, чтобы заинджектить EmployeeService в EmployeeController

### Шаг 11

Объявить в контроллере 3 метода:

1. По адресу /employee/add?firstName=Ivan&lastName=Ivanov должен вернуться объект Employee в формате JSON, т. е. { "firstName": "Ivan", "lastName": "Ivanov" }, или исключение со статусом 500 Internal Server Error в случае переполнения массива или 400 Bad Request в случае, когда сотрудник уже существует.
2. По адресу /employee/remove?firstName=Ivan&lastName=Ivanov должен вернуться объект Employee в формате JSON, т. е. { "firstName": "Ivan", "lastName": "Ivanov" }, или исключение со статусом 404 Not Found, если сотрудник отсутствует.
3. По адресу /employee/find?firstName=Ivan&lastName=Ivanov должен вернуться объект Employee в формате JSON, т. е. { "firstName": "Ivan", "lastName": "Ivanov" }, или исключение со статусом 404 Not Found, если такой сотрудник отсутствует.

### Подсказки

1. Сервис должен быть помечен аннотацией @Service.
2. Контроллер должен быть помечен аннотацией @RestController.
3. Возврат статуса осуществляется с помощью аннотации @ResponseStatus.
4. Никакой логики в контроллере быть не должно. Всю работу с массивом выполняет сервис, а контроллер только формирует сообщение с результатом работы сервиса.
5. В случае отсутствия одного из параметров Spring должен самостоятельно выводить страницу с ошибкой (аннотация @RequestParam).
6. Чтобы не вводить часть с /employee в каждый @GetMapping, следует использовать аннотацию @RequestMapping на уровне контроллера.
7. Spring сам конвертирует ваш объект Employee в JSON. Достаточно просто вернуть его через return в методе контроллера.